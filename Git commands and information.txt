
 hamxa thanks for learning

first see branch or create branch and copy link and switch out to this 

---- explaination of few topics:
Commit -- set of saved repository changes, which never be lost even if we revert back .
it always same in every computer version etc (its hash key or  address).

-- few commands to write below 
echo this_name> file_name ## this file_name will be created and this_name will be written in it 
echo hello world > readme.md
## readme.md file will be created with text hello world

git clone link_of_repository ###(first time donload to system from github)

dir #####to show all directories
cd.. ####[go back to previous directory)
cd dir_name to go to directory

git remote -v ## show pull push files
git command_name -h ## can show all parameters of this command
### show modified files
git status

## select file to push/commit to github from local
git add file_name second_file_name ## from git status can copy file name
or git add .   ##### can select all files 

### git pull origin dev


#### staging
its a place where we can select files to be committed next i.e instead git add . we can add selected files to be commited.

--> unstaging
if mistakenly we select a file for commit but we dont want to be commited we can do
git reset file_name

### git commit
git commit -m "comment regarding this commit"

### git log 
shows overview of commits like time etc and total commits

### git push
git push origin - branch name or git push origin

## git pull  ## pulls all data from central repositoy to local folder



#### Git branches 
one is master branch and remainings are feature branches, its good to work on feature branches first and merge with master one later.
every feature branch could be use for any specific feature/ task. multiple teams could work independenly on their feature branches. later they can merge.

--1 - git branch ## shows available branches
--2 - git branch branch_name  ## create new feature branch
--3 - git switch/checkout branch_name ## switch to branch name selected
--4-  git reflog ## shows all commits/ changes chckout/ switch from all branches not for selected
--5-  git log ## as already know shows commit information including id
--6- git show commit_hash/id ## will show all changes made in all files with green/ red lines, commit hash can copy from log point 5
--7- git show --name-only commit_hash ## will show only file names
--8 - show all files in branch
  9-   git ls-files


##### Undo and Redo changes

git revert commit_hash/id ###  you can undo changes made in this commit
:q for save file

## git reset commit_hash/id  ## we can go back unitl this commit time and all middle once will be removed.. its better when we are only single person working , when its a combine group then revert is better option

-1-> git reset soft commit_hash ## removes commit from history but keeps changes
-2-> git reset hard commit_hash ## removes commits from history and removes changes too


##### merge
we have to merge all the changes in master branch from all local / develop once
push all data after commit to develop / local 
switch back to master
git merge branch_name ### branch name where you created already changes and want in master


#### other Important commands [-h is for detail]

1- git init -h ## initial branch  , create new local repository in foldr
2- git remote add -h ## create new remote repository in project
3- git diff -h ## shows difference between target and source branch
4-  git tage -h ## create a sanpshot of project at certain time
useful before pushing to master branch , can take sanp and see versions
5- git stash -h-- if you select all by git add. then want to deselect can use this
6- git rebase ## very important command to takes commit in original branch to present/current branch before apply new changes in this current branch


